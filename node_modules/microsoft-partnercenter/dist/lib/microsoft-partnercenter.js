"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MicrosoftPartnerCenter = void 0;
const http_token_manager_1 = require("./utils/http-token-manager");
class MicrosoftPartnerCenter {
    constructor(config) {
        const { agent, tokenManager } = (0, http_token_manager_1.initializeHttpAndTokenManager)(config);
        this.httpAgent = agent;
        this.tokenManager = tokenManager;
    }
    async getRefreshToken() {
        return this.tokenManager.getInitializedRefreshToken();
    }
    async getAllCustomers() {
        const { data } = await this.httpAgent.get('/customers');
        return data.items;
    }
    async getInvoices() {
        const { data } = await this.httpAgent.get('/invoices');
        return data.items;
    }
    async getInvoicePDF(invoiceID) {
        const { data } = await this.httpAgent.get(`/invoices/${invoiceID}/documents/statement`, {
            responseType: 'arraybuffer',
        });
        return data;
    }
    async getCustomerById(customerId) {
        const { data } = await this.httpAgent.get(`/customers/${customerId}`);
        return data;
    }
    async getCustomerSubscriptions(customerId) {
        const { data } = await this.httpAgent.get(`/customers/${customerId}/subscriptions`);
        return data.items;
    }
    async getCustomerSubscriptionById(customerId, subscriptionId) {
        const { data } = await this.httpAgent.get(`/customers/${customerId}/subscriptions/${subscriptionId}`);
        return data;
    }
    async getCustomerSubscriptionByOfferId(customerId, offerId) {
        const subs = await this.getCustomerSubscriptions(customerId);
        const sub = subs.find((e) => e.offerId === offerId);
        return sub;
    }
    async updateCustomerSubscriptionUsers(customerId, subscriptionId, usersQuantity) {
        const subscription = await this.getCustomerSubscriptionById(customerId, subscriptionId);
        subscription.quantity = usersQuantity;
        const { data } = await this.httpAgent.patch(`/customers/${customerId}/subscriptions/${subscriptionId}`, subscription);
        return data;
    }
    async updateCustomerSubscription(customerId, subscriptionId, subscription) {
        const url = `/customers/${customerId}/subscriptions/${subscriptionId}`;
        const currentSubscription = await this.getCustomerSubscriptionById(customerId, subscriptionId);
        const updatedSubscription = { ...currentSubscription, ...subscription };
        const { data } = await this.httpAgent.patch(url, updatedSubscription);
        return data;
    }
    async createOrder(customerId, billingCycle, lineItems) {
        const url = `/customers/${customerId}/orders`;
        if (lineItems.some((e) => !e.lineItemNumber)) {
            lineItems.forEach((e, i) => {
                e.lineItemNumber = i;
            });
        }
        const { data } = await this.httpAgent.post(url, {
            lineItems,
            billingCycle,
        });
        return data;
    }
    /**
     * This method creates an order for the first SKU and first availability found for the given product id (NCE)
     */
    async createOrderByProductId(customerId, productId, quantity, billingCycle, options) {
        var _a, _b;
        const skus = await this.getSkusByCustomer(customerId, productId);
        const skuId = (_a = skus[0]) === null || _a === void 0 ? void 0 : _a.id;
        if (!skuId)
            throw new Error('No SKU found for this product.');
        const availabilities = await this.getAvailabilitiesByCustomer(customerId, productId, skuId);
        const availabilityId = (_b = availabilities[0]) === null || _b === void 0 ? void 0 : _b.id;
        if (!availabilityId)
            throw new Error('No availability found for this product.');
        return this.createOrder(customerId, billingCycle, [
            {
                offerId: `${productId}:${skuId}:${availabilityId}`,
                quantity,
                ...options,
            },
        ]);
    }
    async getSkusByCustomer(customerId, productId) {
        const url = `/customers/${customerId}/products/${productId}/skus`;
        const { data } = await this.httpAgent.get(url);
        return data.items;
    }
    async getAvailabilitiesByCustomer(customerId, productId, sku) {
        const url = `/customers/${customerId}/products/${productId}/skus/${sku}/availabilities`;
        const { data } = await this.httpAgent.get(url);
        return data.items;
    }
    /**
     *  Creates an application consent
     * https://learn.microsoft.com/en-us/partner-center/developer/control-panel-vendor-apis#acquire-consent
     * @param customerId
     * @param applicationConsent
     * @returns
     */
    async createApplicationConsent(customerId, applicationConsent) {
        const url = `/customers/${customerId}/applicationconsents`;
        const { data } = await this.httpAgent.post(url, applicationConsent);
        return data;
    }
    /**
     *  Removes an application consent
     * https://learn.microsoft.com/en-us/partner-center/developer/control-panel-vendor-apis#remove-consent
     * @param customerId
     * @param applicationConsentId
     */
    async removeApplicationConsent(customerId, applicationConsentId) {
        const url = `/customers/${customerId}/applicationconsents/${applicationConsentId}`;
        await this.httpAgent.delete(url);
    }
}
exports.MicrosoftPartnerCenter = MicrosoftPartnerCenter;
