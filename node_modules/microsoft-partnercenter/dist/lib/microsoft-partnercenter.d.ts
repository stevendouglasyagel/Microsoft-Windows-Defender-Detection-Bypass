/// <reference types="node" />
import { ApplicationConsent } from './types';
import { Availability } from './types/availabilities.types';
import { IPartnerCenterConfig } from './types/common.types';
import { Customer } from './types/customers.types';
import { Invoice } from './types/invoices.types';
import { OrderLineItem, OrderLineItemOptions, OrderResponse } from './types/orders.types';
import { Sku } from './types/sku.types';
import { Subscription } from './types/subscriptions.types';
export declare class MicrosoftPartnerCenter {
    private readonly httpAgent;
    private readonly tokenManager;
    constructor(config: IPartnerCenterConfig);
    getRefreshToken(): Promise<string | null>;
    getAllCustomers(): Promise<Customer[]>;
    getInvoices(): Promise<Invoice[]>;
    getInvoicePDF(invoiceID: string): Promise<Buffer>;
    getCustomerById(customerId: string): Promise<Customer>;
    getCustomerSubscriptions(customerId: string): Promise<Subscription[]>;
    getCustomerSubscriptionById(customerId: string, subscriptionId: string): Promise<Subscription>;
    getCustomerSubscriptionByOfferId(customerId: string, offerId: string): Promise<Subscription | undefined>;
    updateCustomerSubscriptionUsers(customerId: string, subscriptionId: string, usersQuantity: number): Promise<Subscription>;
    updateCustomerSubscription(customerId: string, subscriptionId: string, subscription: Partial<Subscription>): Promise<Subscription>;
    createOrder(customerId: string, billingCycle: 'monthly' | 'annual', lineItems: OrderLineItem[]): Promise<OrderResponse>;
    /**
     * This method creates an order for the first SKU and first availability found for the given product id (NCE)
     */
    createOrderByProductId(customerId: string, productId: string, quantity: number, billingCycle: 'monthly' | 'annual', options?: OrderLineItemOptions): Promise<OrderResponse>;
    getSkusByCustomer(customerId: string, productId: string): Promise<Sku[]>;
    getAvailabilitiesByCustomer(customerId: string, productId: string, sku: string): Promise<Availability[]>;
    /**
     *  Creates an application consent
     * https://learn.microsoft.com/en-us/partner-center/developer/control-panel-vendor-apis#acquire-consent
     * @param customerId
     * @param applicationConsent
     * @returns
     */
    createApplicationConsent(customerId: string, applicationConsent: ApplicationConsent): Promise<Subscription>;
    /**
     *  Removes an application consent
     * https://learn.microsoft.com/en-us/partner-center/developer/control-panel-vendor-apis#remove-consent
     * @param customerId
     * @param applicationConsentId
     */
    removeApplicationConsent(customerId: string, applicationConsentId: string): Promise<void>;
}
