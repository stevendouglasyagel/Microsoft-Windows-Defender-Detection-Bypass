"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const microsoft_partnercenter_1 = require("./microsoft-partnercenter");
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
describe('Microsoft Partner Center', () => {
    let partnerCenter;
    beforeEach(() => {
        partnerCenter = new microsoft_partnercenter_1.MicrosoftPartnerCenter({
            partnerDomain: 'test',
            authentication: {
                clientId: 'test',
                clientSecret: 'test',
            },
        });
    });
    afterEach(() => {
        jest_mock_axios_1.default.reset();
    });
    it('should get all customers', async () => {
        const customers = [{ id: '1' }, { id: '2' }];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: customers } });
        const result = await partnerCenter.getAllCustomers();
        expect(result).toEqual(customers);
    });
    it('should get all invoices', async () => {
        const invoices = [{ id: '1' }, { id: '2' }];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: invoices } });
        const result = await partnerCenter.getInvoices();
        expect(result).toEqual(invoices);
    });
    it('should get invoice pdf', async () => {
        const pdf = Buffer.from('test');
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: pdf });
        const result = await partnerCenter.getInvoicePDF('1');
        expect(result).toEqual(pdf);
    });
    it('should get customer by id', async () => {
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { id: '1' } });
        const result = await partnerCenter.getCustomerById('1');
        expect(result).toEqual({ id: '1' });
    });
    it('should get customer subscriptions', async () => {
        const subscriptions = [{ id: '1' }, { id: '2' }];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: subscriptions } });
        const result = await partnerCenter.getCustomerSubscriptions('1');
        expect(result).toEqual(subscriptions);
    });
    it('should get customer subscription by id', async () => {
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { id: '1' } });
        const result = await partnerCenter.getCustomerSubscriptionById('1', '1');
        expect(result).toEqual({ id: '1' });
    });
    it('should get customer subscription by offer id', async () => {
        const subscriptions = [
            { id: '1', offerId: '1' },
            { id: '2', offerId: '2' },
        ];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: subscriptions } });
        const result = await partnerCenter.getCustomerSubscriptionByOfferId('1', '1');
        expect(result).toEqual({ id: '1', offerId: '1' });
    });
    it('should update customer subscription users', async () => {
        const subscription = { id: '1', quantity: 1 };
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: subscription });
        jest.spyOn(jest_mock_axios_1.default, 'patch').mockResolvedValue({ data: subscription });
        const result = await partnerCenter.updateCustomerSubscriptionUsers('1', '1', 2);
        expect(result).toEqual(subscription);
    });
    it('should create an order', async () => {
        const subscription = { id: '1', quantity: 16 };
        jest.spyOn(jest_mock_axios_1.default, 'post').mockResolvedValue({ data: subscription });
        const lineItems = [
            {
                offerId: '1',
                quantity: 16,
                termDuration: 'P1M',
            },
        ];
        const result = await partnerCenter.createOrder('1', 'monthly', lineItems);
        expect(result).toEqual(subscription);
        expect(jest_mock_axios_1.default.post).toHaveBeenCalledWith('/customers/1/orders', {
            lineItems: lineItems.map((item, idx) => ({
                ...item,
                lineItemNumber: idx,
            })),
            billingCycle: 'monthly',
        });
    });
    it('should get skus by customer', async () => {
        const offers = [{ id: '1' }, { id: '2' }];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: offers } });
        const result = await partnerCenter.getSkusByCustomer('1', 'productId');
        expect(result).toEqual(offers);
        expect(jest_mock_axios_1.default.get).toHaveBeenCalledWith('/customers/1/products/productId/skus');
    });
    it('should get availabilities by customer', async () => {
        const offers = [{ id: '1' }, { id: '2' }];
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValue({ data: { items: offers } });
        const result = await partnerCenter.getAvailabilitiesByCustomer('1', 'productId', 'skuId');
        expect(result).toEqual(offers);
        expect(jest_mock_axios_1.default.get).toHaveBeenCalledWith('/customers/1/products/productId/skus/skuId/availabilities');
    });
    it('should create an order by product id', async () => {
        const subscription = { id: '1', quantity: 16 };
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValueOnce({ data: { items: [{ id: 'skuId' }] } });
        jest.spyOn(jest_mock_axios_1.default, 'get').mockResolvedValueOnce({
            data: { items: [{ id: 'availabilityId' }] },
        });
        jest.spyOn(jest_mock_axios_1.default, 'post').mockResolvedValue({ data: subscription });
        const lineItems = [
            {
                offerId: 'productId:skuId:availabilityId',
                quantity: 16,
            },
        ];
        const result = await partnerCenter.createOrderByProductId('1', 'productId', 16, 'monthly');
        expect(result).toEqual(subscription);
        expect(jest_mock_axios_1.default.post).toHaveBeenCalledWith('/customers/1/orders', {
            lineItems: lineItems.map((item, idx) => ({
                ...item,
                lineItemNumber: idx,
            })),
            billingCycle: 'monthly',
        });
    });
    it('should create an application consent', async () => {
        const consent = {
            applicationId: '1',
            applicationGrants: [
                {
                    scope: '1',
                    enterpriseApplicationId: '1',
                },
            ],
        };
        jest.spyOn(jest_mock_axios_1.default, 'post').mockResolvedValue({ data: consent });
        const result = await partnerCenter.createApplicationConsent('1', consent);
        expect(result).toEqual(consent);
        expect(jest_mock_axios_1.default.post).toHaveBeenCalledWith('/customers/1/applicationconsents', consent);
    });
    it('should remove an application consent', async () => {
        jest.spyOn(jest_mock_axios_1.default, 'delete').mockResolvedValue({ data: {} });
        const result = await partnerCenter.removeApplicationConsent('1', '1');
        expect(result).toBeUndefined();
        expect(jest_mock_axios_1.default.delete).toHaveBeenCalledWith('/customers/1/applicationconsents/1');
    });
});
