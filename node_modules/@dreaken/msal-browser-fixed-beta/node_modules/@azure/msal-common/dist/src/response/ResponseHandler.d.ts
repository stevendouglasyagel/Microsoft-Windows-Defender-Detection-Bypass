import { IdToken } from "../auth/IdToken";
import { CacheHelpers } from "../cache/CacheHelpers";
import { ServerAuthorizationTokenResponse } from "../server/ServerAuthorizationTokenResponse";
import { ICrypto } from "../crypto/ICrypto";
import { ICacheStorage } from "../cache/ICacheStorage";
import { TokenResponse } from "./TokenResponse";
import { ServerAuthorizationCodeResponse } from "../server/ServerAuthorizationCodeResponse";
import { CodeResponse } from "./CodeResponse";
import { Logger } from "../logger/Logger";
/**
 * Class that handles response parsing.
 */
export declare class ResponseHandler {
    private clientId;
    private cacheStorage;
    private cacheManager;
    private cryptoObj;
    private logger;
    constructor(clientId: string, cacheStorage: ICacheStorage, cacheManager: CacheHelpers, cryptoObj: ICrypto, logger: Logger);
    /**
     * Returns a new response with the data from original response filled with the relevant IdToken data.
     * - raw id token
     * - id token claims
     * - unique id (oid or sub claim of token)
     * - tenant id (tid claim of token)
     * @param originalResponse
     * @param idTokenObj
     */
    static setResponseIdToken(originalResponse: TokenResponse, idTokenObj: IdToken): TokenResponse;
    /**
     * Validates and handles a response from the server, and returns a constructed object with the authorization code and state.
     * @param serverParams
     */
    handleServerCodeResponse(serverParams: ServerAuthorizationCodeResponse): CodeResponse;
    /**
     * Function which validates server authorization code response.
     * @param serverResponseHash
     * @param cachedState
     * @param cryptoObj
     */
    private validateServerAuthorizationCodeResponse;
    /**
     * Function which validates server authorization token response.
     * @param serverResponse
     */
    validateServerAuthorizationTokenResponse(serverResponse: ServerAuthorizationTokenResponse): void;
    /**
     * Helper function which saves or updates the token in the cache and constructs the final token response to send back to the user.
     * @param originalTokenResponse
     * @param authority
     * @param resource
     * @param serverTokenResponse
     * @param clientInfo
     */
    private saveToken;
    /**
     * Gets account cached with given key. Returns null if parsing could not be completed.
     * @param accountKey
     */
    private getCachedAccount;
    /**
     * Returns a constructed token response based on given string. Also manages the cache updates and cleanups.
     * @param serverTokenResponse
     * @param authorityString
     * @param resource
     * @param state
     */
    createTokenResponse(serverTokenResponse: ServerAuthorizationTokenResponse, authorityString: string, resource: string, state?: string): TokenResponse;
}
