import { AccessTokenCacheItem } from "./AccessTokenCacheItem";
import { ICacheStorage } from "./ICacheStorage";
import { Account } from "../auth/Account";
import { Authority } from "../auth/authority/Authority";
import { ServerCodeRequestParameters } from "../server/ServerCodeRequestParameters";
/**
 * The CacheHelpers class contains a set of helper functions used by the module to manage cache items.
 */
export declare class CacheHelpers {
    private cacheStorage;
    constructor(cacheImpl: ICacheStorage);
    /**
     * Create acquireTokenAccountKey to cache account object
     * @param accountId
     * @param state
     */
    generateAcquireTokenAccountKey(accountId: string): string;
    /**
     * Create authorityKey to cache authority
     * @param state
     */
    generateAuthorityKey(state: string): string;
    /**
     * Create Nonce key to cache nonce
     * @param state
     */
    generateNonceKey(state: string): string;
    /**
     * Sets the cachekeys for and stores the account information in cache
     * @param account
     * @param state
     */
    setAccountCache(account: Account): void;
    /**
     * Sets the cacheKey for and stores the authority information in cache
     * @param state
     * @param authority
     */
    setAuthorityCache(authority: Authority, state: string): void;
    /**
     * Updates account, authority, and state in cache
     * @param serverAuthenticationRequest
     * @param account
     */
    updateCacheEntries(serverAuthenticationRequest: ServerCodeRequestParameters, account: Account): void;
    /**
     * Reset all temporary cache items
     * @param state
     */
    resetTempCacheItems(state?: string): void;
    /**
     * Get all access tokens in the cache
     * @param clientId
     * @param homeAccountIdentifier
     */
    getAllAccessTokens(clientId: string, authority: string, resource?: string, homeAccountIdentifier?: string): Array<AccessTokenCacheItem>;
    /**
     * Remove all access tokens in the cache
     * @param clientId
     * @param homeAccountIdentifier
     */
    removeAllAccessTokens(clientId: string, authority: string, resource?: string, homeAccountIdentifier?: string): void;
    /**
     * Checks that any parameters are exact matches for key value, since key.match in the above functions only do contains checks, not exact matches.
     * @param atKey
     * @param clientId
     * @param authority
     * @param resource
     * @param homeAccountIdentifier
     */
    private checkForExactKeyMatch;
}
