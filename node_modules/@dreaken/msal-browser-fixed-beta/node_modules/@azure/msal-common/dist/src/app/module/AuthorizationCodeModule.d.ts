import { AuthModule } from "./AuthModule";
import { PublicClientSPAConfiguration } from "../config/PublicClientSPAConfiguration";
import { AuthenticationParameters } from "../../request/AuthenticationParameters";
import { TokenRenewParameters } from "../../request/TokenRenewParameters";
import { CodeResponse } from "../../response/CodeResponse";
import { TokenResponse } from "../../response/TokenResponse";
/**
 * AuthorizationCodeModule class
 *
 * Object instance which will construct requests to send to and handle responses
 * from the Microsoft STS using the authorization code flow.
 */
export declare class AuthorizationCodeModule extends AuthModule {
    private clientConfig;
    constructor(configuration: PublicClientSPAConfiguration);
    /**
     * Creates a url for logging in a user. This will by default append the client id to the list of scopes,
     * allowing you to retrieve an id token in the subsequent code exchange. Also performs validation of the request parameters.
     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.
     * @param request
     */
    createLoginUrl(request: AuthenticationParameters): Promise<string>;
    /**
     * Creates a url for logging in a user. Also performs validation of the request parameters.
     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.
     * @param request
     */
    createAcquireTokenUrl(request: AuthenticationParameters): Promise<string>;
    /**
     * Helper function which creates URL. If isLoginCall is true, MSAL appends client id scope to retrieve id token from the service.
     * @param request
     * @param isLoginCall
     */
    private createUrl;
    /**
     * Given an authorization code, it will perform a token exchange using cached values from a previous call to
     * createLoginUrl() or createAcquireTokenUrl(). You must call this AFTER using one of those APIs first. You should
     * also use the handleFragmentResponse() API to pass the codeResponse to this function afterwards.
     * @param codeResponse
     */
    acquireToken(codeResponse: CodeResponse): Promise<TokenResponse>;
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token. Will throw an error if login is not completed (unless
     * id tokens are not being renewed).
     * @param request
     */
    renewToken(request: TokenRenewParameters): Promise<TokenResponse>;
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */
    logout(authorityUri?: string): Promise<string>;
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */
    handleFragmentResponse(hashFragment: string): CodeResponse;
    /**
     * Clears cache of items related to current request.
     */
    cancelRequest(): void;
    /**
     * Gets the token exchange parameters from the cache. Throws an error if nothing is found.
     */
    private getCachedRequest;
    /**
     * Gets all cached tokens based on the given criteria.
     * @param requestScopes
     * @param authorityUri
     * @param resourceId
     * @param homeAccountIdentifier
     */
    private getCachedTokens;
    /**
     * Makes a request to the token endpoint with the given parameters and parses the response.
     * @param tokenEndpoint
     * @param tokenReqParams
     * @param tokenRequest
     * @param codeResponse
     */
    private getTokenResponse;
    /**
     *
     * Use to get the redirect uri configured in MSAL or null.
     * Evaluates redirectUri if its a function, otherwise simply returns its value.
     * @returns {string} redirect URL
     *
     */
    getRedirectUri(): string;
    /**
     * Use to get the post logout redirect uri configured in MSAL or null.
     * Evaluates postLogoutredirectUri if its a function, otherwise simply returns its value.
     *
     * @returns {string} post logout redirect URL
     */
    getPostLogoutRedirectUri(): string;
}
