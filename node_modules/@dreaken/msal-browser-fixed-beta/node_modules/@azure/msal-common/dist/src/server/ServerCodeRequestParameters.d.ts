import { Authority } from "../auth/authority/Authority";
import { Account } from "../auth/Account";
import { ICrypto, PkceCodes } from "../crypto/ICrypto";
import { ScopeSet } from "../auth/ScopeSet";
import { IdToken } from "../auth/IdToken";
import { AuthenticationParameters } from "../request/AuthenticationParameters";
/**
 * This class extends the ServerRequestParameters class. This class validates URL request parameters, checks for SSO and generates required URL.
 */
export declare class ServerCodeRequestParameters {
    private cryptoObj;
    xClientVer: string;
    xClientSku: string;
    correlationId: string;
    clientId: string;
    scopes: ScopeSet;
    redirectUri: string;
    authorityInstance: Authority;
    responseType: string;
    userRequest: AuthenticationParameters;
    queryParameters: string;
    extraQueryParameters: string;
    generatedPkce: PkceCodes;
    state: string;
    nonce: string;
    account: Account;
    constructor(authority: Authority, clientId: string, userRequest: AuthenticationParameters, cachedAccount: Account, redirectUri: string, cryptoImpl: ICrypto, isLoginCall: boolean);
    /**
     * Appends extraScopesToConsent if passed
     */
    private appendExtraScopes;
    /**
     * Check to see if there are SSO params set in the Request
     * @param request
     */
    hasSSOParam(): boolean;
    /**
     * Adds SSO parameter to query parameters:
     * - sid of the account object used to identify the session of the user on the service
     * - login_hint to authorization URL which is used to pre-fill the username field of sign in page for the user if known ahead of time
     * Also does a sanity check for extraQueryParameters passed by the user to ensure no repeat queryParameters
     *
     * @param {@link Account} account - Account for which the token is requested
     * @param queryparams
     * @param {@link ServerRequestParameters}
     */
    private addSSOQueryParameters;
    /**
     * Utility to populate QueryParameters and ExtraQueryParameters to ServerRequestParamerers
     * @param adalIdTokenObject
     */
    populateQueryParams(adalIdTokenObject?: IdToken): void;
    /**
     * Create navigation url.
     */
    createNavigateUrl(): Promise<string>;
    /**
     * Create a query parameter string.
     */
    private createParamString;
    /**
     * Utility to test if valid prompt value is passed in the request
     * @param request
     */
    private validatePromptParameter;
    /**
     * Removes unnecessary or duplicate query parameters from extraQueryParameters
     * @param request
     */
    private sanitizeEQParams;
    /**
     * Utility to generate a QueryParameterString from a Key-Value mapping of extraQueryParameters passed
     * @param extraQueryParameters
     */
    private generateQueryParametersString;
}
