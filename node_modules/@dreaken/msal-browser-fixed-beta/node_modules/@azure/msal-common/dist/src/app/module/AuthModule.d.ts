import { ModuleConfiguration } from "../config/ModuleConfiguration";
import { AuthenticationParameters } from "../../request/AuthenticationParameters";
import { TokenRenewParameters } from "../../request/TokenRenewParameters";
import { CodeResponse } from "../../response/CodeResponse";
import { TokenResponse } from "../../response/TokenResponse";
import { ICacheStorage } from "../../cache/ICacheStorage";
import { CacheHelpers } from "../../cache/CacheHelpers";
import { INetworkModule } from "../../network/INetworkModule";
import { ICrypto } from "../../crypto/ICrypto";
import { Account } from "../../auth/Account";
import { Authority } from "../../auth/authority/Authority";
import { Logger } from "../../logger/Logger";
/**
 * @hidden
 * @ignore
 * Data type to hold information about state returned from the server
 */
export declare type ResponseStateInfo = {
    state: string;
    stateMatch: boolean;
};
/**
 * AuthModule class
 *
 * Parent object instance which will construct requests to send to and handle responses from the Microsoft STS using the authorization code flow.
 *
 */
export declare abstract class AuthModule {
    logger: Logger;
    private config;
    protected cryptoObj: ICrypto;
    protected cacheStorage: ICacheStorage;
    protected networkClient: INetworkModule;
    protected cacheManager: CacheHelpers;
    protected account: Account;
    protected defaultAuthorityInstance: Authority;
    constructor(configuration: ModuleConfiguration);
    /**
     * Creates a url for logging in a user. This will by default append the client id to the list of scopes,
     * allowing you to retrieve an id token in the subsequent code exchange. Also performs validation of the request parameters.
     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.
     * @param request
     */
    abstract createLoginUrl(request: AuthenticationParameters): Promise<string>;
    /**
     * Creates a url for logging in a user. Also performs validation of the request parameters.
     * Including any SSO parameters (account, sid, login_hint) will short circuit the authentication and allow you to retrieve a code without interaction.
     * @param request
     */
    abstract createAcquireTokenUrl(request: AuthenticationParameters): Promise<string>;
    /**
     * Handles the hash fragment response from public client code request. Returns a code response used by
     * the client to exchange for a token in acquireToken.
     * @param hashFragment
     */
    abstract handleFragmentResponse(hashFragment: string): CodeResponse;
    /**
     * Given an authorization code, it will perform a token exchange using cached values from a previous call to
     * createLoginUrl() or createAcquireTokenUrl(). You must call this AFTER using one of those APIs first. You should
     * also use the handleFragmentResponse() API to pass the codeResponse to this function afterwards.
     * @param codeResponse
     */
    abstract acquireToken(codeResponse: CodeResponse): Promise<TokenResponse>;
    /**
     * Retrieves a token from cache if it is still valid, or uses the cached refresh token to renew
     * the given token and returns the renewed token. Will throw an error if login is not completed (unless
     * id tokens are not being renewed).
     * @param request
     */
    abstract renewToken(request: TokenRenewParameters): Promise<TokenResponse>;
    /**
     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.
     * Default behaviour is to redirect the user to `window.location.href`.
     * @param authorityUri
     */
    abstract logout(authorityUri?: string): Promise<string>;
    /**
     * Returns the signed in account
     * (the account object is created at the time of successful login)
     * or null when no state is found
     * @returns {@link Account} - the account object stored in MSAL
     */
    getAccount(): Account;
}
