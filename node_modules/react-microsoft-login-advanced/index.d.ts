import * as React from "react";
import { PublicClientApplication, AuthResponse, AuthError } from "@dreaken/msal-browser-fixed-beta";
import {CodeResponse} from "@azure/msal-common";
import {StringDict} from "@azure/msal-common/dist/src/utils/MsalTypes";

type MicrosoftLoginButtonTheme = "dark_short" | "light_short" | "dark" | "light";
type MicrosoftLoginPrompt = "login" | "select_account" | "consent" | "none";
interface MicrosoftLoginProps extends React.Props<MicrosoftLogin> {
  /**
   * Application (client) ID
   */
  clientId: string;

  /**
   * Callback function which takes two arguments (error, authData)
   */
  authCallback: (error?: AuthError, result?: CodeResponse) => void;

  /**
   * Array of Graph API permission names.
   */
  graphScopes?: [string];

  /**
   * A URL indicating a directory that MSAL can request tokens from.
   * In Azure AD, it is of the form https://<instance>/<tenant>>, where <instance> is the directory host
   * (e.g. https://login.microsoftonline.com) and <tenant> is an identifier within the directory itself
   * (e.g. a domain associated to the tenant, such as contoso.onmicrosoft.com,
   * or the GUID representing the TenantID property of the directory)
   * In Azure AD B2C, it is of the form https://<instance>/tfp/<tenantId>/<policyName>/
   */
  tenantUrl?: string;

  /**
   * Name of theme for button style.
   */
  buttonTheme?: MicrosoftLoginButtonTheme;

  /**
   * Make an additional request to GraphAPI to get user data.
   */
  withUserData?: boolean;

  /**
   * Enable detailed logs of authorization process.
   */
  debug?: boolean;

  /**
   * Additional class name string.
   */
  className?: string;

  /**
   * Prompt behavior for interactive requests
   * https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-js-prompt-behavior
   */
  prompt?: MicrosoftLoginPrompt;

  /**
   * Force redirect login strategy. This strategy used by default on IE browsers to avoid issues.
   * If set true login will be executed only with redirect strategy in all browsers.
   */
  forceRedirectStrategy?: boolean;

  /**
   * The redirect URI of the application, this should be same as the value in the application registration portal.
   */
  redirectUri?: string;
  extraQueryParameters?: StringDict;

}

interface MicrosoftLoginState {
  msalInstance?: PublicClientApplication;
  scopes: [string];
  extraQueryParameters?: StringDict;
}

declare class MicrosoftLogin extends React.Component<
  MicrosoftLoginProps,
  MicrosoftLoginState
> {}

export { MicrosoftLogin, MicrosoftLoginProps, MicrosoftLoginState, MicrosoftLoginButtonTheme, MicrosoftLoginPrompt, CodeResponse };

export default MicrosoftLogin;
